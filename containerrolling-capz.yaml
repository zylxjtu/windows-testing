apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: containerrolling-capz-md-win
  namespace: default
spec:
  template:
    spec:
      files:
      - contentFrom:
          secret:
            key: worker-node-azure.json
            name: containerrolling-capz-md-win-azure-json
        owner: root:root
        path: c:/k/azure.json
        permissions: "0644"
      - content: |-
          Add-MpPreference -ExclusionProcess C:/opt/cni/bin/calico.exe
          Add-MpPreference -ExclusionProcess C:/opt/cni/bin/calico-ipam.exe
        path: C:/defender-exclude-calico.ps1
        permissions: "0744"
      - content: |
          # /tmp is assumed created and required for upstream e2e tests to pass
          New-Item -ItemType Directory -Force -Path C:\tmp\
        path: C:/create-temp-folder.ps1
        permissions: "0744"
      - content: |
          $ErrorActionPreference = 'Stop'
          $CONTAINERD_URL="https://github.com/containerd/containerd/releases/download/v1.7.6/containerd-1.7.6-windows-amd64.tar.gz"
          if($CONTAINERD_URL -ne ""){
            # Kubelet service depends on contianerd service so make a best effort attempt to stop it
            Stop-Service kubelet -Force -ErrorAction SilentlyContinue
            Stop-Service containerd -Force
            echo "downloading containerd: $CONTAINERD_URL"
            curl.exe --retry 10 --retry-delay 5 -L "$CONTAINERD_URL" --output "c:/k/containerd.tar.gz"
            tar.exe -zxvf c:/k/containerd.tar.gz -C "c:/Program Files/containerd" --strip-components 1

            Start-Service containerd
          }
          containerd.exe --version
          containerd-shim-runhcs-v1.exe --version
        path: C:/replace-containerd.ps1
        permissions: "0744"
      - content: |
          $ErrorActionPreference = 'Stop'

          Stop-Service kubelet -Force

          $CI_VERSION="v1.27.6-45+df5d09a3b82cc8"
          if($CI_VERSION -ne "")
          {
            $binaries=@("kubeadm", "kubectl", "kubelet", "kube-proxy")
            $ci_url="https://storage.googleapis.com/k8s-release-dev/ci/$CI_VERSION/bin/windows/amd64"
            foreach ( $binary in $binaries )
            {
              echo "downloading binary: $ci_url/$binary.exe"
              curl.exe --retry 10 --retry-delay 5 "$ci_url/$binary.exe" --output "c:/k/$binary.exe"
            }
          }

          # Tag it to the ci version.  The image knows how to use the copy locally with the configmap
          # that is applied at at this stage (windows-kubeproxy-ci.yaml)
          ctr.exe -n k8s.io images pull docker.io/sigwindowstools/kube-proxy:v1.23.1-calico-hostprocess
          ctr.exe -n k8s.io images tag docker.io/sigwindowstools/kube-proxy:v1.23.1-calico-hostprocess "docker.io/sigwindowstools/kube-proxy:v1.27.6-45_df5d09a3b82cc8-calico-hostprocess"

          kubeadm.exe version -o=short
          kubectl.exe version --client=true --short=true
          kubelet.exe --version
          kube-proxy.exe --version
        path: C:/replace-ci-binaries.ps1
        permissions: "0744"
      joinConfiguration:
        nodeRegistration:
          criSocket: npipe:////./pipe/containerd-containerd
          kubeletExtraArgs:
            azure-container-registry-config: c:/k/azure.json
            cloud-config: c:/k/azure.json
            cloud-provider: azure
            feature-gates: HPAContainerMetrics=true
            v: "2"
            windows-priorityclass: ABOVE_NORMAL_PRIORITY_CLASS
          name: '{{ ds.meta_data["local_hostname"] }}'
      postKubeadmCommands:
      - nssm set kubelet start SERVICE_AUTO_START
      - powershell C:/defender-exclude-calico.ps1
      preKubeadmCommands:
      - powershell C:/create-temp-folder.ps1
      - powershell C:/replace-containerd.ps1
      - powershell C:/replace-ci-binaries.ps1
      users:
      - groups: Administrators
        name: capi
        sshAuthorizedKeys:
        - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCyNbA+doXkMnYKo2UWv/K5uzb54MoLBi7Q0b0gpVdxcJRaGLJoBdO6rxxOI+BWKXdUsEaPqZcSR3VDQxlcypKaIsZg8Fc0HZtWoAzmItKqZVY+FHIIaFi+TlLN6Q4SunB68OZtAiiGSbFVyGNwh5tDygyZcJdHUUOOcZBho71E9Rbk1ulzcTAX+KppEAGcYr+rzx7y9PRr10wy2Q21iwnNBKBe2Ig8aq5uwYXIW3NxYTO8Rv8/zQv7B5clXdZVj6r1bMDn23b6mEqTsSPXjvqM4h5HLRz+M5TYRQMk27roUu3p68GcDetpFvIQe+cioca6hfetbaTjKgstqZS9yiX9
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    cni: containerrolling-capz-calico
    containerd-logger: enabled
    csi-proxy: enabled
    metrics-server: enabled
  name: containerrolling-capz
  namespace: default
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: containerrolling-capz-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureCluster
    name: containerrolling-capz
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: containerrolling-capz-md-win
  namespace: default
spec:
  clusterName: containerrolling-capz
  replicas: 3
  selector: {}
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: containerrolling-capz-md-win
      clusterName: containerrolling-capz
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachineTemplate
        name: containerrolling-capz-md-win
      version: v1.27.6-45+df5d09a3b82cc8
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: containerrolling-capz-control-plane
  namespace: default
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
          feature-gates: HPAContainerMetrics=true
        extraVolumes:
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
        timeoutForControlPlane: 20m
      controllerManager:
        extraArgs:
          allocate-node-cidrs: "false"
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
          cluster-name: containerrolling-capz
          feature-gates: HPAContainerMetrics=true
          v: "4"
        extraVolumes:
        - hostPath: /etc/kubernetes/azure.json
          mountPath: /etc/kubernetes/azure.json
          name: cloud-config
          readOnly: true
      etcd:
        local:
          dataDir: /var/lib/etcddisk/etcd
          extraArgs:
            quota-backend-bytes: "8589934592"
      kubernetesVersion: ci/v1.27.6-45+df5d09a3b82cc8
    diskSetup:
      filesystems:
      - device: /dev/disk/azure/scsi1/lun0
        extraOpts:
        - -E
        - lazy_itable_init=1,lazy_journal_init=1
        filesystem: ext4
        label: etcd_disk
      - device: ephemeral0.1
        filesystem: ext4
        label: ephemeral0
        replaceFS: ntfs
      partitions:
      - device: /dev/disk/azure/scsi1/lun0
        layout: true
        overwrite: false
        tableType: gpt
    files:
    - contentFrom:
        secret:
          key: control-plane-azure.json
          name: containerrolling-capz-control-plane-azure-json
      owner: root:root
      path: /etc/kubernetes/azure.json
      permissions: "0644"
    - content: |
        #!/bin/bash
        set -o nounset
        set -o pipefail
        set -o errexit
        [[ $(id -u) != 0 ]] && SUDO="sudo" || SUDO=""
        # This test installs release packages or binaries that are a result of the CI and release builds.
        # It runs '... --version' commands to verify that the binaries are correctly installed
        # and finally uninstalls the packages.
        # For the release packages it tests all versions in the support skew.
        LINE_SEPARATOR="*************************************************"
        echo "$LINE_SEPARATOR"
        CI_VERSION=v1.27.6-45+df5d09a3b82cc8
        if [[ "${CI_VERSION}" != "" ]]; then
          CI_DIR=/tmp/k8s-ci
          mkdir -p $CI_DIR
          declare -a PACKAGES_TO_TEST=("kubectl" "kubelet" "kubeadm")
          declare -a CONTAINERS_TO_TEST=("kube-apiserver" "kube-controller-manager" "kube-proxy" "kube-scheduler")
          CONTAINER_EXT="tar"
          echo "* testing CI version $CI_VERSION"
          # Check for semver
          if [[ "${CI_VERSION}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION_WITHOUT_PREFIX="1.27.6-45+df5d09a3b82cc8"
            DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https curl
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
            echo 'deb https://apt.kubernetes.io/ kubernetes-xenial main' > /etc/apt/sources.list.d/kubernetes.list
            apt-get update
            # replace . with \.
            VERSION_REGEX=""
            PACKAGE_VERSION="$(apt-cache madison kubelet|grep ${VERSION_REGEX}- | head -n1 | cut -d '|' -f 2 | tr -d '[:space:]')"
            for CI_PACKAGE in "${PACKAGES_TO_TEST[@]}"; do
              echo "* installing package: $CI_PACKAGE ${PACKAGE_VERSION}"
              DEBIAN_FRONTEND=noninteractive apt-get install -y $CI_PACKAGE=$PACKAGE_VERSION
            done
          else
            CI_URL="https://storage.googleapis.com/k8s-release-dev/ci/${CI_VERSION}/bin/linux/amd64"
            for CI_PACKAGE in "${PACKAGES_TO_TEST[@]}"; do
              echo "* downloading binary: $CI_URL/$CI_PACKAGE"
              wget "$CI_URL/$CI_PACKAGE" -nv -O "$CI_DIR/$CI_PACKAGE"
              chmod +x "$CI_DIR/$CI_PACKAGE"
              mv "$CI_DIR/$CI_PACKAGE" "/usr/bin/$CI_PACKAGE"
            done
            IMAGE_REGISTRY_PREFIX=registry.k8s.io
            for CI_CONTAINER in "${CONTAINERS_TO_TEST[@]}"; do
              echo "* downloading package: $CI_URL/$CI_CONTAINER.$CONTAINER_EXT"
              wget "$CI_URL/$CI_CONTAINER.$CONTAINER_EXT" -nv -O "$CI_DIR/$CI_CONTAINER.$CONTAINER_EXT"
              ${SUDO} ctr -n k8s.io images import "$CI_DIR/$CI_CONTAINER.$CONTAINER_EXT" || echo "* ignoring expected 'ctr images import' result"
              ${SUDO} ctr -n k8s.io images tag $IMAGE_REGISTRY_PREFIX/$CI_CONTAINER-amd64:"${CI_VERSION//+/_}" $IMAGE_REGISTRY_PREFIX/$CI_CONTAINER:"${CI_VERSION//+/_}"
              ${SUDO} ctr -n k8s.io images tag $IMAGE_REGISTRY_PREFIX/$CI_CONTAINER-amd64:"${CI_VERSION//+/_}" gcr.io/k8s-staging-ci-images/$CI_CONTAINER:"${CI_VERSION//+/_}"
            done
          fi
          systemctl restart kubelet
        fi
        echo "* checking binary versions"
        echo "ctr version: " $(ctr version)
        echo "kubeadm version: " $(kubeadm version -o=short)
        echo "kubectl version: " $(kubectl version --client=true --short=true)
        echo "kubelet version: " $(kubelet --version)
        echo "$LINE_SEPARATOR"
      owner: root:root
      path: /tmp/kubeadm-bootstrap.sh
      permissions: "0744"
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
        name: '{{ ds.meta_data["local_hostname"] }}'
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          azure-container-registry-config: /etc/kubernetes/azure.json
          cloud-config: /etc/kubernetes/azure.json
          cloud-provider: azure
        name: '{{ ds.meta_data["local_hostname"] }}'
    mounts:
    - - LABEL=etcd_disk
      - /var/lib/etcddisk
    postKubeadmCommands: []
    preKubeadmCommands:
    - bash -c /tmp/kubeadm-bootstrap.sh
    useExperimentalRetryJoin: true
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AzureMachineTemplate
      name: containerrolling-capz-control-plane
  replicas: 1
  version: v1.27.6-45+df5d09a3b82cc8
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureCluster
metadata:
  name: containerrolling-capz
  namespace: default
spec:
  additionalTags:
    buildProvenance: canary
    creationTimestamp: "2023-10-12T18:02:50Z"
    jobName: cluster-api-provider-azure-e2e
  identityRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureClusterIdentity
    name: cluster-identity
  location: eastus
  networkSpec:
    subnets:
    - name: control-plane-subnet
      role: control-plane
    - name: node-subnet
      natGateway:
        name: node-natgateway
      role: node
    vnet:
      name: containerrolling-capz-vnet
  resourceGroup: containerrolling-capz
  subscriptionID: 1c8c4edc-b188-4199-9580-3173033d75f7
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureClusterIdentity
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move-hierarchy: "true"
  name: cluster-identity
  namespace: default
spec:
  allowedNamespaces: {}
  clientID: aa0caef4-31da-4426-9908-f75af27075c8
  clientSecret:
    name: cluster-identity-secret
    namespace: default
  tenantID: 72f988bf-86f1-41af-91ab-2d7cd011db47
  type: ServicePrincipal
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: containerrolling-capz-control-plane
  namespace: default
spec:
  template:
    spec:
      dataDisks:
      - diskSizeGB: 256
        lun: 0
        nameSuffix: etcddisk
      image:
        marketplace:
          offer: capi
          publisher: cncf-upstream
          sku: ubuntu-1804-gen1
          version: latest
      osDisk:
        diskSizeGB: 128
        osType: Linux
      sshPublicKey: c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDeU5iQStkb1hrTW5ZS28yVVd2L0s1dXpiNTRNb0xCaTdRMGIwZ3BWZHhjSlJhR0xKb0JkTzZyeHhPSStCV0tYZFVzRWFQcVpjU1IzVkRReGxjeXBLYUlzWmc4RmMwSFp0V29Bem1JdEtxWlZZK0ZISUlhRmkrVGxMTjZRNFN1bkI2OE9adEFpaUdTYkZWeUdOd2g1dER5Z3laY0pkSFVVT09jWkJobzcxRTlSYmsxdWx6Y1RBWCtLcHBFQUdjWXIrcnp4N3k5UFJyMTB3eTJRMjFpd25OQktCZTJJZzhhcTV1d1lYSVczTnhZVE84UnY4L3pRdjdCNWNsWGRaVmo2cjFiTURuMjNiNm1FcVRzU1BYanZxTTRoNUhMUnorTTVUWVJRTWsyN3JvVXUzcDY4R2NEZXRwRnZJUWUrY2lvY2E2aGZldGJhVGpLZ3N0cVpTOXlpWDk=
      vmSize: Standard_D2s_v3
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  annotations:
    runtime: containerd
  name: containerrolling-capz-md-win
  namespace: default
spec:
  template:
    metadata:
      annotations:
        runtime: containerd
    spec:
      identity: UserAssigned
      image:
        computeGallery:
          gallery: windowsservercore
          name: image-rs_sparc_ctr_v1
          resourceGroup: containerRolling
          subscriptionID: 1c8c4edc-b188-4199-9580-3173033d75f7
          version: 4.0.0
      osDisk:
        diskSizeGB: 128
        managedDisk:
          storageAccountType: Premium_LRS
        osType: Windows
      sshPublicKey: c3NoLXJzYSBBQUFBQjNOemFDMXljMkVBQUFBREFRQUJBQUFCQVFDeU5iQStkb1hrTW5ZS28yVVd2L0s1dXpiNTRNb0xCaTdRMGIwZ3BWZHhjSlJhR0xKb0JkTzZyeHhPSStCV0tYZFVzRWFQcVpjU1IzVkRReGxjeXBLYUlzWmc4RmMwSFp0V29Bem1JdEtxWlZZK0ZISUlhRmkrVGxMTjZRNFN1bkI2OE9adEFpaUdTYkZWeUdOd2g1dER5Z3laY0pkSFVVT09jWkJobzcxRTlSYmsxdWx6Y1RBWCtLcHBFQUdjWXIrcnp4N3k5UFJyMTB3eTJRMjFpd25OQktCZTJJZzhhcTV1d1lYSVczTnhZVE84UnY4L3pRdjdCNWNsWGRaVmo2cjFiTURuMjNiNm1FcVRzU1BYanZxTTRoNUhMUnorTTVUWVJRTWsyN3JvVXUzcDY4R2NEZXRwRnZJUWUrY2lvY2E2aGZldGJhVGpLZ3N0cVpTOXlpWDk=
      userAssignedIdentities:
      - providerID: /subscriptions/1c8c4edc-b188-4199-9580-3173033d75f7/resourcegroups/containerRolling/providers/Microsoft.ManagedIdentity/userAssignedIdentities/containerRollingMI
      vmSize: Standard_D2s_v3
